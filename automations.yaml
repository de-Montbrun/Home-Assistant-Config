- id: ha_startup_items
  alias: Home Assistant Startup Item
  trigger:
    platform: homeassistant
    event: start
  action:
  - service: mqtt.publish
    data:
      topic: cmnd/tasmotas/backlog
      payload: 'power1 ;power2 ;power3 ;power4 ;power5; dimmer; state '
- id: ha_notify_ha_update_available
  alias: Update Available Notification
  initial_state: true
  trigger:
    platform: state
    entity_id: binary_sensor.python_package_index_pypi_update_available
    from: 'off'
    to: 'on'
  action:
    service: notify.zulip
    data:
      message: '{{ trigger.to_state.attributes.friendly_name }} has an update available.'
      title: Home Assistant
- id: ha_notify_hacs_update_available
  alias: HACS Update Available Notification
  initial_state: true
  trigger:
    platform: template
    value_template: '{{ states("sensor.hacs") | int > 0 }}'
  action:
    service: notify.zulip
    data:
      message: '{{ trigger.to_state.attributes.friendly_name }} has an update available.'
      title: Home Assistant
- id: occupancy_alarm_no_one_home_alarm_alarm
  alias: Occupancy - no one home - alarm alarm
  triggers:
  - entity_id:
    - person.gail
    - person.gervais
    - person.cameron
    - person.jennifer
    from: home
    trigger: state
  conditions:
  - condition: not
    conditions:
    - condition: state
      entity_id: person.cameron
      state: home
    - condition: state
      entity_id: person.gail
      state: home
    - condition: state
      entity_id: person.gervais
      state: home
    - condition: state
      entity_id: person.jennifer
      state: home
  actions:
  - action: lock.lock
    metadata: {}
    data: {}
    target:
      entity_id:
      - lock.front_door_lock_lock_mechanism
      - lock.garage_door_lock_lock_mechanism
  - target:
      entity_id: alarm_control_panel.alarmo
    data: {}
    action: alarm_control_panel.alarm_arm_away
  initial_state: true
- id: occupancy_alarm_return_home_disarm_alarm
  alias: Occupancy - return home - disarm alarm
  triggers:
  - entity_id:
    - person.cameron
    - person.jennifer
    - person.gail
    - person.gervais
    to: home
    trigger: state
  actions:
  - target:
      entity_id: alarm_control_panel.alarmo
    data: {}
    action: alarm_control_panel.alarm_disarm
  - action: lock.unlock
    metadata: {}
    data: {}
    target:
      entity_id: lock.garage_door_lock_lock_mechanism
  initial_state: true
- id: tap0_button_1
  alias: Tap0 Button 1
  triggers:
  - device_id: 2b533c9f9b279032d1907efe688c476d
    domain: hue
    type: initial_press
    subtype: 1
    unique_id: a9cd78d6-bb3c-404b-9091-af08cc7a2b45
    trigger: device
  actions:
  - action: light.toggle
    data: {}
    target:
      entity_id: light.tv_room_lights
- id: tap0_button_2
  alias: Tap0 Button 2
  trigger:
  - device_id: 2b533c9f9b279032d1907efe688c476d
    domain: hue
    platform: device
    type: initial_press
    subtype: 2
    unique_id: a9cd78d6-bb3c-404b-9091-af08cc7a2b45
  action:
    service: scene.turn_on
    entity_id: scene.sunroom_dim
- id: tap0_button_3
  alias: Tap0 Button 3
  triggers:
  - device_id: 2b533c9f9b279032d1907efe688c476d
    domain: hue
    type: initial_press
    subtype: 3
    unique_id: a9cd78d6-bb3c-404b-9091-af08cc7a2b45
    trigger: device
  actions:
  - action: homeassistant.turn_on
    data: {}
    target:
      entity_id: automation.lighting_tv_play_pause
  - entity_id: automation.sunroom_no_occupancy_lights_off
    action: homeassistant.turn_on
  - action: scene.turn_on
    data: {}
    target:
      entity_id:
      - scene.tv_room_dim
- id: tap0_button_4
  alias: Tap0 Button 4
  triggers:
  - device_id: 2b533c9f9b279032d1907efe688c476d
    domain: hue
    type: initial_press
    subtype: 4
    unique_id: a9cd78d6-bb3c-404b-9091-af08cc7a2b45
    trigger: device
  actions:
  - action: homeassistant.turn_off
    data: {}
    target:
      entity_id:
      - automation.lighting_tv_play_pause
  - entity_id: automation.sunroom_no_occupancy_lights_off
    action: homeassistant.turn_off
  - entity_id: scene.sunroom_normal
    action: scene.turn_on
- id: tap1_buttons
  alias: Tap1 Doorbell
  triggers:
  - device_id: 34639f5aa92cbec96fe2fb0a0ec6cf7c
    domain: hue
    type: initial_press
    subtype: 1
    unique_id: 0d35c07b-3179-486a-87cc-787794d0b994
    trigger: device
  - device_id: 34639f5aa92cbec96fe2fb0a0ec6cf7c
    domain: hue
    type: initial_press
    subtype: 2
    unique_id: 0d35c07b-3179-486a-87cc-787794d0b994
    trigger: device
  - device_id: 34639f5aa92cbec96fe2fb0a0ec6cf7c
    domain: hue
    type: initial_press
    subtype: 3
    unique_id: 0d35c07b-3179-486a-87cc-787794d0b994
    trigger: device
  - device_id: 34639f5aa92cbec96fe2fb0a0ec6cf7c
    domain: hue
    type: initial_press
    subtype: 4
    unique_id: 0d35c07b-3179-486a-87cc-787794d0b994
    trigger: device
  actions:
  - data:
      message: "Someone is at the front door. \U0001F514"
    action: notify.mobile_app_iphone
  - data:
      message: "Someone is at the front door. \U0001F514"
    action: notify.mobile_app_gail_iphone
  - condition: state
    entity_id: media_player.tv_roomtv
    state: playing
  - data:
      command: play
    action: remote.send_command
    target:
      entity_id: remote.tv_roomtv
- id: occupancy_heating_no_one_home_turn_down_heat
  alias: Occupancy - no one home - turn down heat
  triggers:
  - entity_id:
    - person.gail
    - person.gervais
    - person.cameron
    - person.jennifer
    from: home
    trigger: state
  conditions:
  - condition: and
    conditions:
    - condition: state
      entity_id: climate.mysa_2fa20c_thermostat
      state: heat
    - condition: state
      entity_id: climate.mysa_112908_thermostat
      state: heat
    - condition: numeric_state
      entity_id: sensor.charlottetown_temperature
      below: 6
    - condition: numeric_state
      entity_id: zone.home
      below: 1
    - condition: not
      conditions:
      - condition: state
        entity_id: sensor.season
        state: summer
  actions:
  - metadata: {}
    target:
      entity_id:
      - scene.heat_away_2
    action: scene.turn_on
    data: {}
  initial_state: true
- id: occupancy_heating_return_home_turn_up_heat
  alias: Occupancy - return home - turn up heat
  triggers:
  - entity_id:
    - person.gail
    - group.cam_tracker
    - group.jen_tracker
    - person.gervais
    to: home
    trigger: state
  conditions:
  - condition: and
    conditions:
    - condition: time
      after: '16:30:00'
      before: '23:20:00'
    - condition: state
      entity_id: climate.mysa_2fa20c_thermostat
      state: heat
    - condition: state
      entity_id: climate.mysa_112908_thermostat
      state: heat
    - condition: not
      conditions:
      - condition: state
        entity_id: sensor.season
        state: summer
    - condition: numeric_state
      entity_id: sensor.charlottetown_temperature
      below: 6
  actions:
  - metadata: {}
    target:
      entity_id:
      - scene.heat_home_2
    action: scene.turn_on
    data: {}
  initial_state: true
- id: heating_office_heater_off
  alias: 6pm - heater off
  trigger:
  - platform: time
    at: '19:00:00'
  condition:
  - condition: and
    conditions:
    - condition: template
      value_template: '{{ states("sensor.season") != "summer" }}'
  action:
  - service: switch.turn_off
    entity_id: switch.switch1
  - delay:
      hours: 0
      minutes: 1
      seconds: 0
      milliseconds: 0
  - service: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: switch.switch1
  initial_state: true
- id: occupancy_heating_gail_away_heater_off
  alias: Gail away - toggle Gail office switch
  description: ''
  triggers:
  - entity_id:
    - person.gail
    from: home
    for:
      hours: 0
      minutes: 5
      seconds: 0
    trigger: state
  conditions: []
  actions:
  - metadata: {}
    data: {}
    target:
      entity_id: switch.switch1
    action: switch.turn_off
  - delay:
      hours: 0
      minutes: 1
      seconds: 0
      milliseconds: 0
  - metadata: {}
    data: {}
    target:
      entity_id: switch.switch1
    action: switch.turn_on
  initial_state: true
- id: occupancy_bedroom_gang_not_home
  alias: GandG not home - turn off bedroom things
  trigger:
  - platform: state
    entity_id:
    - person.gail
    - person.gervais
    from: home
    for:
      hours: 0
      minutes: 5
      seconds: 0
  condition:
  - condition: and
    conditions:
    - condition: not
      conditions:
      - condition: state
        entity_id: person.gail
        state: home
    - condition: not
      conditions:
      - condition: state
        entity_id: device_tracker.iphone
        state: home
  action:
  - service: light.turn_off
    data: {}
    target:
      entity_id:
      - light.bedroom_lights
      - light.bathroom_lights
  - service: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.switch4
  initial_state: true
- id: occupancy_lighting_kitchen_on
  alias: Kitchen - Occupancy lights on
  triggers:
  - entity_id: binary_sensor.kitchen_sensor_motion
    to: 'on'
    trigger: state
  conditions:
  - condition: and
    conditions:
    - condition: or
      conditions:
      - condition: state
        entity_id: light.entryway_lights
        state: 'off'
      - condition: state
        entity_id: light.kitchen_lights
        state: 'off'
    - condition: or
      conditions:
      - condition: numeric_state
        entity_id: sensor.kitchen_sensor_light_level
        below: 5
      - condition: state
        entity_id: sun.sun
        state: below_horizon
  actions:
  - metadata: {}
    data: {}
    target:
      entity_id:
      - light.kitchen_counter
      - light.kitchen_pots
      - light.entryway2
      - light.entryway0
    action: light.turn_on
- id: occupancy_lighting_kitchen_off
  alias: Kitchen - No occupancy lights off
  triggers:
  - entity_id:
    - binary_sensor.kitchen_sensor_motion
    to: 'off'
    for:
      hours: 0
      minutes: 20
      seconds: 0
    trigger: state
  - at: '23:59:00'
    trigger: time
  conditions:
  - condition: or
    conditions:
    - condition: and
      conditions:
      - condition: sun
        before: sunset
      - condition: state
        entity_id: binary_sensor.kitchen_sensor_motion
        for:
          hours: 0
          minutes: 10
          seconds: 0
        state: 'off'
    - condition: and
      conditions:
      - condition: time
        after: '23:00:00'
        before: 06:00:00
      - condition: state
        entity_id: binary_sensor.kitchen_sensor_motion
        state: 'off'
        for:
          hours: 0
          minutes: 10
          seconds: 0
  actions:
  - metadata: {}
    data: {}
    target:
      entity_id:
      - light.kitchen_lights
      - light.entryway_lights
    action: light.turn_off
- id: lighting_livingroomtv_play-pause
  alias: Lighting - TV play/pause
  triggers:
  - entity_id:
    - media_player.plex_plex_for_roku_tv_roomtv
    trigger: state
    for:
      hours: 0
      minutes: 0
      seconds: 3
  conditions:
  - condition: and
    conditions:
    - condition: state
      entity_id: sun.sun
      state: below_horizon
    - condition: state
      entity_id: light.tv_room_lights
      state: 'on'
    - condition: state
      entity_id: media_player.plex_plex_for_roku_tv_roomtv
      attribute: media_content_type
      state: movie
      enabled: false
  actions:
  - data:
      entity_id: "{%- if trigger.to_state.state == 'playing' -%}\n  scene.tv_room_dim\n{%-
        else -%}\n  scene.tv_room_normal\n{% endif %}\n"
    action: scene.turn_on
  initial_state: true
- id: occupancy_lighting_motion_livingroom
  alias: Timed lights - Movement in TV Room
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.tv_room_occupancy_motion
    - binary_sensor.tv_room_occupancy_occupancy
    to: 'on'
    trigger: state
  conditions:
  - condition: and
    conditions:
    - condition: state
      entity_id: light.tv_room_lights
      state: 'off'
    - condition: numeric_state
      entity_id: sensor.tv_room_occupancy_illuminance
      below: 600
  actions:
  - data:
      brightness_pct: 29
    action: light.turn_on
    target:
      entity_id: light.tv_room_lamps
  - delay: 00:10
  - condition: time
    after: 00:01:00
    before: 09:00:00
  - condition: state
    entity_id: media_player.tv_roomtv
    state: standby
  - action: light.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: light.tv_room_lights
  mode: restart
- id: occupancy_lighting_tv_room_off
  alias: TV room - No occupancy lights off
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.tv_room_occupancy_occupancy
    to: 'off'
    for:
      minutes: 10
    trigger: state
  conditions:
  - condition: or
    conditions:
    - condition: and
      conditions:
      - condition: sun
        before: sunset
        before_offset: '30'
      - condition: state
        entity_id: binary_sensor.tv_room_occupancy_occupancy
        for:
          hours: 0
          minutes: 10
          seconds: 0
        state: 'off'
      - condition: state
        entity_id: media_player.tv_roomtv
        state: standby
    - condition: and
      conditions:
      - condition: time
        after: '23:50:00'
        before: 06:00:00
      - condition: state
        entity_id: binary_sensor.tv_room_occupancy_occupancy
        state: 'off'
        for:
          hours: 0
          minutes: 10
          seconds: 0
      - condition: state
        entity_id: media_player.tv_roomtv
        state: standby
  actions:
  - action: light.turn_off
    data: {}
    target:
      entity_id: light.tv_room_lights
- id: turn_on_lights_office
  alias: Occupancy in Office - turn on lights
  triggers:
  - entity_id:
    - binary_sensor.basement_sensor_motion
    to: 'on'
    trigger: state
  - at: 09:00:00
    trigger: time
  conditions:
  - condition: or
    conditions:
    - condition: and
      conditions:
      - condition: state
        entity_id: binary_sensor.workday_sensor
        state: 'on'
      - condition: time
        after: 08:00:00
        before: '20:00:00'
      - condition: state
        entity_id: light.office_lights
        state: 'off'
    - condition: and
      conditions:
      - condition: state
        entity_id: binary_sensor.tv_room_occupancy_motion
        state: 'on'
      - condition: state
        entity_id: light.office_lights
        state: 'off'
  actions:
  - data: {}
    action: light.turn_on
    target:
      entity_id:
      - light.office_desk_lights
      - light.office_desk_lamp
  - condition: and
    conditions:
    - condition: state
      entity_id: binary_sensor.workday_sensor
      state: 'on'
    - condition: time
      before: '18:00:00'
  - action: light.turn_on
    metadata: {}
    data:
      brightness: 255
    target:
      entity_id:
      - light.office_main
      - light.office_ceiling_light
      - light.office_floor_lamp
- id: turn_off_lights_office
  alias: 'Occupancy - Turn off lights no one in Office '
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.basement_sensor_motion
    to: 'off'
    for:
      minutes: 10
    trigger: state
  - trigger: time_pattern
    minutes: '1'
  - trigger: zone
    entity_id: person.gervais
    zone: zone.home
    event: leave
  conditions:
  - condition: and
    conditions:
    - condition: state
      entity_id: binary_sensor.audio_input_in_use
      state: 'off'
    - condition: or
      conditions:
      - condition: not
        conditions:
        - condition: zone
          entity_id: person.gervais
          zone: zone.home
      - condition: and
        conditions:
        - condition: state
          entity_id: binary_sensor.basement_sensor_motion
          state: 'off'
          for:
            hours: 0
            minutes: 9
            seconds: 30
        - condition: or
          conditions:
          - condition: time
            before: 08:00:00
            after: '18:00:00'
          - condition: state
            entity_id: binary_sensor.workday_sensor
            state: 'off'
    - condition: state
      entity_id: binary_sensor.audio_input_in_use_greenapple
      state: 'off'
    - condition: state
      entity_id: binary_sensor.active_greenapple
      state: 'off'
      for:
        hours: 0
        minutes: 10
        seconds: 0
  actions:
  - entity_id: light.office_lights
    action: light.turn_off
- id: movement_front_door_timed_lights
  alias: Timed lights - Movement Front Door
  initial_state: false
  mode: restart
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.doorbell_motion
    - binary_sensor.doorbell_doorbell
    to: 'on'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: light.outdoor_lights
      state: 'off'
    - condition: state
      entity_id: sun.sun
      state: below_horizon
  action:
  - service: homeassistant.turn_off
    entity_id: automation.timed_lights_movement_front_door
  - service: light.turn_on
    data:
      entity_id:
      - light.outdoor_lights
      brightness: 255
  - delay: 00:10:00
  - service: light.turn_off
    entity_id:
    - light.outdoor_lights
  - delay: 00:00:04
  - service: homeassistant.turn_on
    entity_id: automation.timed_lights_movement_front_door
- id: movement_porch_timed_lights
  alias: Timed lights - Movement Porch
  triggers:
  - entity_id:
    - binary_sensor.rack_motion
    to: 'on'
    trigger: state
  conditions:
  - condition: and
    conditions:
    - condition: state
      entity_id: light.outdoor_lights
      state: 'off'
    - condition: state
      entity_id: sun.sun
      state: below_horizon
  actions:
  - entity_id: light.outdoor_lights
    action: light.turn_on
  - delay: 00:10:00
  - entity_id: light.outdoor_lights
    action: light.turn_off
  initial_state: false
  mode: restart
- id: bedtime
  alias: Bedtime
  triggers:
  - entity_id:
    - media_player.tv_roomtv
    to: standby
    for:
      hours: 0
      minutes: 30
      seconds: 0
    trigger: state
  conditions:
  - condition: and
    conditions:
    - condition: or
      conditions:
      - condition: time
        after: '22:00:00'
      - condition: time
        before: 02:00:00
    - condition: and
      conditions:
      - condition: state
        entity_id: person.gervais
        state: home
      - condition: or
        conditions:
        - condition: state
          entity_id: person.gail
          state: home
        - condition: template
          value_template: '{{ distance(states.device_tracker.grdems_phone_2) > 10
            }}'
    - condition: and
      conditions:
      - condition: state
        entity_id: person.gail
        state: home
      - condition: or
        conditions:
        - condition: state
          entity_id: person.gervais
          state: home
        - condition: template
          value_template: '{{ distance(states.device_tracker.iphone) > 10 }}'
  actions:
  - metadata: {}
    data: {}
    target:
      entity_id:
      - light.main_floor_lights
      - light.second_floor_lights
      - switch.switch3
      - light.basement_lights
    action: homeassistant.turn_off
  mode: restart
- id: doorbell_doorbell
  alias: Doorbell rang - pause tv
  triggers:
  - entity_id: binary_sensor.doorbell_doorbell
    to: 'on'
    trigger: state
  actions:
  - data:
      command: pause
    action: remote.send_command
    target:
      entity_id: remote.tv_roomtv
  initial_state: true
- id: everyone_home_and_gone_to_bed
  alias: Everyone home and gone to bed - Lights out
  triggers:
  - entity_id:
    - media_player.tv_roomtv
    to: standby
    for:
      minutes: 15
    trigger: state
  - entity_id:
    - person.gail
    - person.gervais
    to: home
    trigger: state
  conditions:
  - condition: and
    conditions:
    - condition: time
      after: '22:30:00'
    - condition: state
      entity_id: media_player.tv_roomtv
      state: standby
    - condition: or
      conditions:
      - condition: template
        value_template: '{{ states("person.gail") != "home" }}'
      - condition: template
        value_template: '{{ distance(states.device_tracker.grdems_phone_2) > 10 }}'
    - condition: or
      conditions:
      - condition: template
        value_template: '{{ states("person.gervais") != "home" }}'
      - condition: template
        value_template: '{{ distance(states.device_tracker.iphone) > 10 }}'
  actions:
  - delay:
      hours: 0
      minutes: 20
      seconds: 0
  - entity_id: automation.timed_lights_movement_front_door
    action: homeassistant.turn_off
  - data: {}
    target:
      entity_id:
      - light.main_floor_lights
      - light.second_floor_lights
      - light.basement_lights
      - light.outdoor_lights
    action: light.turn_off
  - delay: 00:00:04
  - entity_id: automation.timed_lights_movement_front_door
    action: homeassistant.turn_on
  initial_state: true
- id: lighting_2am_lights_off
  alias: 2am - Lights out
  triggers:
  - at: 02:00:00
    trigger: time
  actions:
  - entity_id: automation.timed_lights_movement_front_door
    action: homeassistant.turn_off
  - data: {}
    target:
      entity_id:
      - switch.switch0
      - switch.switch3
    action: switch.turn_off
  - data: {}
    target:
      entity_id:
      - light.main_floor_lights
      - light.second_floor_lights
      - light.outdoor_lights
      - light.basement_lights
    action: light.turn_off
  - delay: 00:00:05
  - entity_id: automation.timed_lights_movement_front_door
    action: homeassistant.turn_on
  initial_state: true
- id: sunrise
  alias: Sunrise - Lights out
  triggers:
  - event: sunrise
    offset: +00:30:00
    trigger: sun
  actions:
  - action: light.turn_off
    data: {}
    target:
      entity_id: light.outdoor_lights
- id: sunset
  alias: Sunset - Lights on
  trigger:
  - platform: sun
    event: sunset
    offset: -00:30:00
  condition: []
  action:
  - service: scene.turn_on
    target:
      entity_id: scene.sunset
    data: {}
  - service: switch.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: switch.switch3
  initial_state: true
- id: misc_sabnzb_speed_limit
  alias: Set sabnzb speed limit
  trigger:
  - platform: state
    entity_id: person.gail,person.gervais,group.jen_tracker
  - platform: time
    at: '10:00:00'
  - platform: time
    at: '18:00:00'
  - platform: time
    at: 02:00:00
  - platform: template
    value_template: '{{ states.media_player | select("match", ".*media_player.plex_.*")
      | list | selectattr("state", "equalto", "playing") | list | count | int >= 1
      }}'
  - platform: template
    value_template: '{{ states.media_player | select("match", ".*media_player.plex_.*")
      | list | selectattr("state", "equalto", "playing") | list | count | int == 0
      }}'
  action:
  - service: rest_command.sabnzb_api
    data: {}
  initial_state: false
- id: misc_living_room_turn_off_tv
  alias: Turn off TV room tv when idle
  description: ''
  triggers:
  - minutes: /20
    seconds: 0
    trigger: time_pattern
  conditions:
  - condition: and
    conditions:
    - condition: template
      value_template: '{{ states("media_player.tv_roomtv") != "standby" }}'
    - condition: template
      value_template: '{{ states("media_player.tv_roomtv") != "unavailable" }}'
    - condition: state
      entity_id: binary_sensor.tv_room_occupancy_occupancy
      state: 'off'
      for:
        minutes: 39
    - condition: and
      conditions:
      - condition: state
        entity_id: device_tracker.tvroomtv
        state: home
        for:
          minutes: 15
      - condition: state
        entity_id: media_player.tv_roomtv
        state: idle
        for:
          minutes: 15
      - condition: or
        conditions:
        - condition: state
          entity_id: media_player.plex_plex_for_roku_tv_roomtv
          state: idle
          for:
            hours: 0
            minutes: 15
            seconds: 0
        - condition: state
          entity_id: media_player.plex_plex_for_roku_tv_roomtv
          state: unavailable
  actions:
  - data:
      command: power
    action: remote.send_command
    target:
      entity_id: remote.tv_roomtv
  initial_state: true
- id: notify_home_presence
  alias: Home presence notification
  trigger:
    platform: state
    entity_id: group.cam_tracker,group.jen_tracker,group.grant_tracker
  condition:
    condition: template
    value_template: '{{ as_timestamp(now()) - as_timestamp(states.sensor.hass_uptime.state)
      | int > 5 }}'
  action:
    service: notify.zulip
    data_template:
      message: ':{{ trigger.to_state.attributes.friendly_name | lower }}: {{ trigger.to_state.attributes.friendly_name
        }} has {%- if trigger.to_state.state == ''home'' %} entered {%- else %} exited
        {%- endif %} home.

        '
      title: Family Location
- id: notify_phone_presence
  alias: Phones presence notification
  trigger:
    platform: state
    entity_id: person.gervais,person.gail
  condition:
    condition: and
    conditions:
    - condition: template
      value_template: '{{ as_timestamp(now()) - as_timestamp(states.sensor.hass_uptime.state)
        | int > 5 }}'
    - condition: template
      value_template: '{{ trigger.from_state.state != trigger.to_state.state }}'
  action:
    service: notify.zulip
    data_template:
      message: ':{{ trigger.to_state.attributes.friendly_name | lower }}: {{ trigger.to_state.attributes.friendly_name
        }} has {%- if trigger.from_state.state == ''not_home'' or trigger.from_state.state
        == ''Away'' %} entered {{ trigger.to_state.state }}. {%- else %} exited {{
        trigger.from_state.state }}. {%- endif %}

        '
      title: Family Location
- id: notify_current_weather
  alias: Current weather notification
  triggers:
  - entity_id:
    - sensor.charlottetown_current_condition
    - sensor.fredericton_condition
    - sensor.montreal_current_condition
    - sensor.saint_john_current_condition
    - sensor.atlanta_current_condition
    - sensor.las_vegas_current_condition
    trigger: state
  conditions:
  - condition: and
    conditions:
    - condition: template
      value_template: '{{ as_timestamp(now()) - as_timestamp(states.sensor.hass_uptime.state)
        | int > 5 }}'
    - condition: template
      value_template: '{{ trigger.to_state.state != trigger.from_state.state }}'
    - condition: template
      value_template: '{{ trigger.to_state.state != "unknown" }}'
    - condition: template
      value_template: "{{ states(state_attr('sensor.closest_city', 'condition_entity'))
        != \"unavailable\" and \n   states(state_attr('sensor.closest_city', 'condition_entity'))
        != \"unknown\" }}"
    - condition: template
      value_template: '{{ as_timestamp(now()) - as_timestamp(states.automation.current_weather_notification.attributes.last_triggered)
        | int > 3600 }}'
  actions:
  - data:
      message: '{% set closest_city = states(''sensor.closest_city'') %} {% set distance
        = state_attr(''sensor.closest_city'', ''distance'') %} {% set condition_entity
        = state_attr(''sensor.closest_city'', ''condition_entity'') %} {% set temperature_entity
        = state_attr(''sensor.closest_city'', ''temperature_entity'') %} {% set humidex_entity
        = state_attr(''sensor.closest_city'', ''humidex_entity'') %} {% set wind_chill_entity
        = state_attr(''sensor.closest_city'', ''wind_chill_entity'') %}

        **Current Weather for {{ closest_city }}:**

        **Weather Condition:** {{states(condition_entity) }}

        **Temperature:** {{ states(temperature_entity) }}{{ state_attr(temperature_entity,
        ''unit_of_measurement'') }}

        {% if states(humidex_entity) != ''unknown'' or states(wind_chill_entity) !=
        ''unknown'' %} **Feels like:** {% if states(humidex_entity) != ''unknown''
        %}{{ states(humidex_entity) }}{% elif states(wind_chill_entity) != ''unknown''
        %}{{ states(wind_chill_entity) }}{{ state_attr(temperature_entity, ''unit_of_measurement'')
        }}{% endif %} {% endif %}

        '
      title: Weather
    action: notify.zulip
  initial_state: true
- id: notify_current_uv_index
  alias: Current UV index notification
  description: ''
  triggers:
  - trigger: template
    value_template: '{{ states(state_attr(''sensor.closest_city'', ''uv_index_entity''))
      | float > 4 }}'
  conditions:
  - condition: and
    conditions:
    - condition: template
      value_template: '{{ as_timestamp(now()) - as_timestamp(states.sensor.hass_uptime.state)
        | int > 5 }}'
    - condition: state
      entity_id: sun.sun
      state: above_horizon
  actions:
  - data:
      message: ':sunny: UV Index is {{ states(state_attr(''sensor.closest_city'',
        ''uv_index_entity'')) }}. You better put on some sunscreen!

        '
      title: Weather
    action: notify.zulip
- id: notify_weather_forecast
  alias: Weather forecast notification
  triggers:
  - at: 08:00:00
    trigger: time
  - trigger: time
    at: '12:00:00'
  - trigger: time
    at: '18:00:00'
  conditions:
  - condition: template
    value_template: "{% set closest_city = states('sensor.closest_city') %} {% set
      entities = {\n  'Charlottetown': 'weather.charlottetown_forecast',\n  'Fredericton':
      'weather.fredericton_forecast',\n  'Saint John': 'weather.saint_john_forecast',\n
      \ 'Montreal': 'weather.montreal_forecast',\n  'Atlanta': 'weather.forecast_atlanta',\n
      \ 'Las Vegas': 'weather.forecast_las_vegas'\n} %} {{ states(entities[closest_city])
      != 'unknown' }}"
  - condition: template
    value_template: "{% set closest_city = states('sensor.closest_city') %} {% set
      entities = {\n  'Charlottetown': 'sensor.charlottetown_high_temperature',\n
      \ 'Fredericton': 'sensor.fredericton_high_temperature',\n  'Saint John': 'sensor.saint_john_high_temperature',\n
      \ 'Montreal': 'sensor.montreal_high_temperature',\n  'Atlanta': 'sensor.atlanta_high_temperature',\n
      \ 'Las Vegas': 'sensor.las_vegas_high_temperature'\n} %} {{ states(entities[closest_city])
      != 'unknown' }}"
  - condition: template
    value_template: "{% set closest_city = states('sensor.closest_city') %} {% set
      entities = {\n  'Charlottetown': 'sensor.charlottetown_low_temperature',\n  'Fredericton':
      'sensor.fredericton_low_temperature',\n  'Saint John': 'sensor.saint_john_low_temperature',\n
      \ 'Montreal': 'sensor.montreal_low_temperature',\n  'Atlanta': 'sensor.atlanta_low_temperature',\n
      \ 'Las Vegas': 'sensor.las_vegas_low_temperature'\n} %} {{ states(entities[closest_city])
      != 'unknown' }}"
  actions:
  - data:
      message: "{% set closest_city = states('sensor.closest_city') %} {% set distance
        = state_attr('sensor.closest_city', 'distance') %}\n{% set summary_entities
        = {\n  'Charlottetown': 'sensor.charlottetown_summary',\n  'Fredericton':
        'sensor.fredericton_summary',\n  'Saint John': 'sensor.saint_john_summary',\n
        \ 'Montreal': 'sensor.montreal_summary',\n  'Atlanta': 'sensor.atlanta_summary',\n
        \ 'Las Vegas': 'sensor.las_vegas_summary'\n} %}\n{% set high_temp_entities =
        {\n  'Charlottetown': 'sensor.charlottetown_high_temperature',\n  'Fredericton':
        'sensor.fredericton_high_temperature',\n  'Saint John': 'sensor.saint_john_high_temperature',\n
        \ 'Montreal': 'sensor.montreal_high_temperature',\n  'Atlanta': 'sensor.atlanta_high_temperature',\n
        \ 'Las Vegas': 'sensor.las_vegas_high_temperature'\n} %}\n{% set low_temp_entities
        = {\n  'Charlottetown': 'sensor.charlottetown_low_temperature',\n  'Fredericton':
        'sensor.fredericton_low_temperature',\n  'Saint John': 'sensor.saint_john_low_temperature',\n
        \ 'Montreal': 'sensor.montreal_low_temperature',\n  'Atlanta': 'sensor.atlanta_low_temperature',\n
        \ 'Las Vegas': 'sensor.las_vegas_low_temperature'\n} %}\n**Forecast for {{ closest_city
        }}:**\n{{ states(summary_entities[closest_city]) }}\n**High:** {{ states(high_temp_entities[closest_city])
        }}{{ state_attr(high_temp_entities[closest_city], \"unit_of_measurement\")
        }}\n**Low:** {{ states(low_temp_entities[closest_city]) }}{{ state_attr(low_temp_entities[closest_city],
        \"unit_of_measurement\") }}\n"
      title: Weather
    action: notify.zulip
  initial_state: true
- id: notify_low_battery
  alias: Low battery level detection & notification for all battery sensors
  initial_state: true
  use_blueprint:
    path: sbyx/low-battery-level-detection-notification-for-all-battery-sensors.yaml
    input:
      threshold: 10
      time: '19:00:00'
      exclude:
        entity_id:
        - sensor.internal_battery_level
        - sensor.alice_battery_level
        - sensor.consuela_battery_level
        - sensor.gail_iphone_battery_level
        - sensor.gail_iphone_battery_state
        - sensor.ipad_battery_level
        - sensor.jennifers_iphone_battery_level
        - sensor.jennifers_iphone_battery_state
        - sensor.iphone_battery_level
        - sensor.iphone_battery_state
      actions:
      - data:
          message: Low batter on {{sensors}}.
          title: Home Assistant
        action: notify.zulip
- id: vacuum_start
  alias: Vacuum Start
  triggers:
  - entity_id:
    - person.gail
    - person.gervais
    from: home
    for:
      hours: 0
      minutes: 5
      seconds: 0
    trigger: state
  conditions:
  - condition: and
    conditions:
    - condition: state
      entity_id: vacuum.consuela
      state: docked
    - condition: state
      entity_id: fan.delicious
      state: 'off'
      enabled: true
    - condition: template
      value_template: '{{ as_timestamp(now()) - as_timestamp(state_attr("automation.vacuum_start"
        , "last_triggered")) | int > 432000 }}'
    - condition: template
      value_template: '{{ states("person.gail") != "home" }}'
    - condition: template
      value_template: '{{ states("person.gervais") != "home" }}'
  actions:
  - data: {}
    target:
      entity_id:
      - vacuum.consuela
      - vacuum.robot_2
      - vacuum.robot
      - vacuum.robot_4
    action: vacuum.start
  - action: fan.set_percentage
    metadata: {}
    data:
      percentage: 70
    target:
      entity_id: fan.delicious
- id: mop_start
  alias: Mop Start
  trigger:
    platform: state
    entity_id: vacuum.consuela
    to: docked
  condition:
    condition: and
    conditions:
    - condition: template
      value_template: '{{ as_timestamp(now()) - as_timestamp(state_attr("automation.vacuum_start"
        , "last_triggered")) | int < 36000 }}'
    - condition: template
      value_template: '{{ as_timestamp(now()) - as_timestamp(state_attr("automation.vacuum_stop",
        "last_triggered")) | int > 1800 }}'
  action:
    service: vacuum.start
    data: {}
    entity_id: vacuum.alice
- id: vacuum_stop
  alias: Vacuum Stop
  triggers:
  - entity_id: group.jen_tracker,person.gail,person.gervais
    to: home
    trigger: state
  conditions:
  - condition: or
    conditions:
    - condition: state
      entity_id: vacuum.alice
      state: cleaning
    - condition: state
      entity_id: vacuum.consuela
      state: cleaning
    - condition: state
      entity_id: fan.delicious
      state: 'on'
  actions:
  - entity_id: all
    action: vacuum.return_to_base
  - action: fan.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: fan.delicious
  initial_state: false
- id: zigbee_log_level
  alias: Zigbee2mqtt Log Level
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: input_select.zigbee2mqtt_log_level
  action:
    service: mqtt.publish
    data:
      payload_template: '{{ states(''input_select.zigbee2mqtt_log_level'') }}'
      topic: zigbee2mqtt/bridge/config/log_level
- id: '1705282122548'
  alias: Volvo - Auto Lock After Parking
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.volvo_volvo_engine_status
    to: 'off'
    for:
      hours: 0
      minutes: 30
      seconds: 0
    trigger: state
  conditions:
  - condition: state
    entity_id: lock.volvo_volvo_lock
    state: unlocked
  actions:
  - metadata: {}
    data: {}
    action: lock.lock
    target:
      entity_id: lock.volvo_volvo_lock
  mode: single
- id: notify_door_unlocked_away
  alias: Notify if doors unlocked when away
  triggers:
  - entity_id:
    - lock.front_door_lock_lock_mechanism
    - lock.garage_door_lock_lock_mechanism
    to: unlocked
    trigger: state
  conditions:
  - condition: and
    conditions:
    - condition: template
      value_template: '{{ states("person.gail") != "home" }}'
    - condition: template
      value_template: '{{ states("person.gervais") != "home" }}'
    - condition: template
      value_template: '{{ states("person.cameron") != "home" }}'
    - condition: template
      value_template: '{{ states("person.jennifer") != "home" }}'
  actions:
  - action: notify.zulip
    data:
      message: "\U0001F513 {{ trigger.to_state.attributes.friendly_name }} was unlocked
        while no one is home!"
      title: Security Alert
  - action: notify.mobile_app_gail_iphone
    data:
      message: "\U0001F513 {{ trigger.to_state.attributes.friendly_name }} was unlocked
        while no one is home!"
      title: Security Alert
  - action: notify.mobile_app_iphone
    data:
      message: "\U0001F513 {{ trigger.to_state.attributes.friendly_name }} was unlocked
        while no one is home!"
      title: Security Alert
- id: '1708818994369'
  alias: Heat - Turn down at bed time
  description: ''
  triggers:
  - at: '23:00:00'
    trigger: time
  conditions:
  - condition: and
    conditions:
    - condition: not
      conditions:
      - condition: state
        entity_id: sensor.season
        state: summer
    - condition: numeric_state
      entity_id: sensor.charlottetown_temperature
      below: 5
    - condition: state
      entity_id: climate.mysa_2fa20c_thermostat
      state: heat
    - condition: state
      entity_id: climate.mysa_112908_thermostat
      state: heat
  actions:
  - metadata: {}
    target:
      entity_id:
      - scene.heat_sleep_2
    action: scene.turn_on
    data: {}
  mode: single
- id: misc_bed_room_turn_off_tv
  alias: Turn off bed room tv when idle
  trigger:
  - platform: time_pattern
    minutes: /20
    seconds: 0
  condition:
  - condition: and
    conditions:
    - condition: template
      value_template: '{{ states("media_player.bedroomtv") != "standby" }}'
    - condition: template
      value_template: '{{ states("media_player.bedroomtv") != "unavailable" }}'
    - condition: or
      conditions:
      - condition: state
        entity_id: media_player.plex_plex_for_roku_bedroomtv
        state: idle
        for:
          minutes: 15
      - condition: state
        entity_id: media_player.bedroomtv
        state: idle
        for:
          minutes: 15
      - condition: state
        entity_id: media_player.bedroomtv
        state: home
        for:
          minutes: 15
      - condition: state
        entity_id: media_player.bedroomtv
        state: 'on'
        for:
          minutes: 15
  action:
  - service: remote.send_command
    data:
      command: power
    target:
      entity_id: remote.bedroomtv
  mode: single
  initial_state: true
- id: '1709693054657'
  alias: Heat - Not workday wake up
  description: ''
  triggers:
  - at: '10:00:00'
    trigger: time
  conditions:
  - condition: and
    conditions:
    - condition: state
      entity_id: binary_sensor.workday_sensor
      state: 'off'
    - condition: numeric_state
      entity_id: sensor.charlottetown_temperature
      below: 5
    - condition: state
      entity_id: climate.mysa_2fa20c_thermostat
      state: heat
    - condition: state
      entity_id: climate.mysa_112908_thermostat
      state: heat
    - condition: not
      conditions:
      - condition: state
        entity_id: sensor.season
        state: summer
  actions:
  - metadata: {}
    target:
      entity_id:
      - scene.heat_home_2
    action: scene.turn_on
    data: {}
  mode: single
- id: '1717197737888'
  alias: Fan - turn off
  description: ''
  triggers:
  - at: 09:00:00
    enabled: true
    trigger: time
  - at: '11:00:00'
    enabled: true
    trigger: time
  - entity_id:
    - person.gail
    from: home
    for:
      hours: 0
      minutes: 5
      seconds: 0
    trigger: state
    id: gail-not-home
  - entity_id:
    - person.gervais
    from: home
    for:
      hours: 0
      minutes: 5
      seconds: 0
    trigger: state
    id: gervais-not-home
  conditions:
  - condition: or
    conditions:
    - condition: and
      conditions:
      - condition: state
        entity_id: binary_sensor.workday_sensor
        state: 'on'
      - condition: time
        after: 08:59:00
    - condition: and
      conditions:
      - condition: not
        conditions:
        - condition: state
          entity_id: person.gail
          state: home
      - condition: not
        conditions:
        - condition: state
          entity_id: person.gervais
          state: home
      - condition: trigger
        id:
        - gail-not-home
        - gervais-not-home
    - condition: time
      after: '10:50:00'
  actions:
  - metadata: {}
    data: {}
    target:
      entity_id: switch.switch4
    action: switch.turn_off
  mode: single
- id: '1717456710664'
  alias: Keep toggle switches on
  description: ''
  triggers:
  - entity_id:
    - switch.switch4
    to: 'off'
    trigger: state
  - entity_id:
    - switch.switch1
    to: 'off'
    trigger: state
  - trigger: state
    entity_id:
    - switch.office_main
    to: 'off'
  conditions: []
  actions:
  - delay:
      hours: 0
      minutes: 0
      seconds: 30
      milliseconds: 0
  - metadata: {}
    data: {}
    target:
      entity_id:
      - switch.switch4
      - switch.switch1
      - switch.office_main
    action: switch.turn_on
  mode: restart
- id: '1738108426886'
  alias: On Air
  description: ''
  triggers:
  - type: turned_on
    device_id: 58ed6404dd328113e9eba60ee42f700d
    entity_id: 436f65b6469bf468c896827d5557574c
    domain: binary_sensor
    trigger: device
    for:
      hours: 0
      minutes: 2
      seconds: 0
  - type: turned_on
    device_id: 9e702f0b6d26018028c93f6658692ddd
    entity_id: 497ce5a50e7f79011fdf7b3ae97f53a7
    domain: binary_sensor
    trigger: device
    for:
      hours: 0
      minutes: 2
      seconds: 0
  - trigger: state
    entity_id:
    - sensor.frontmost_app_greenapple
    - sensor.frontmost_app
    to: zoom.us
  - trigger: state
    entity_id:
    - sensor.frontmost_app_greenapple
    - sensor.frontmost_app
    to: Slack
  - trigger: state
    entity_id:
    - sensor.frontmost_app_greenapple
    - sensor.frontmost_app
    to: Messenger
  conditions:
  - condition: and
    conditions:
    - condition: or
      conditions:
      - condition: state
        entity_id: sensor.frontmost_app_greenapple
        state: zoom.us
      - condition: state
        entity_id: sensor.frontmost_app_greenapple
        state: Slack
      - condition: state
        entity_id: sensor.frontmost_app_greenapple
        state: Messenger
      - condition: state
        entity_id: sensor.frontmost_app
        state: zoom.us
      - condition: state
        entity_id: sensor.frontmost_app
        state: Slack
      - condition: state
        entity_id: sensor.frontmost_app
        state: Messenger
    - condition: or
      conditions:
      - condition: state
        entity_id: binary_sensor.camera_in_use_greenapple
        state: 'on'
        for:
          hours: 0
          minutes: 2
          seconds: 0
      - condition: state
        entity_id: binary_sensor.camera_in_use
        state: 'on'
        for:
          hours: 0
          minutes: 2
          seconds: 0
  actions:
  - action: light.turn_on
    metadata: {}
    data:
      rgb_color:
      - 0
      - 46
      - 122
      brightness_pct: 100
    target:
      entity_id:
      - light.office_ceiling_light
  mode: single
- id: '1738458067745'
  alias: Sync TV Backlight Kit to TV state
  description: ''
  triggers:
  - entity_id:
    - media_player.tv_roomtv
    trigger: state
    to: standby
  - trigger: state
    entity_id:
    - media_player.tv_roomtv
    to: 'on'
  - trigger: state
    entity_id:
    - media_player.tv_roomtv
    to: 'off'
  - trigger: state
    entity_id:
    - media_player.tv_roomtv
    from: playing
  conditions: []
  actions:
  - variables:
      tvroomtvstate: "{%- if trigger.to_state.state == 'standby' or trigger.to_state.state
        == 'off' -%}\n      light.turn_off\n{%- else -%}\n      light.turn_on\n{%
        endif %}\n"
  - entity_id: light.tv_backlight_kit
    action: '{{ tvroomtvstate }}'
  mode: single
  initial_state: true
- id: '1738548638585'
  alias: Sync Basement Bathroom
  description: ''
  triggers:
  - entity_id:
    - light.basement_bathroom
    trigger: state
    to: 'off'
    for:
      hours: 0
      minutes: 10
      seconds: 0
  conditions: []
  actions:
  - action: light.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: light.basement_shower
  mode: single
  initial_state: true
- id: '1739132526017'
  alias: Sync Powder Room Fan
  description: ''
  triggers:
  - entity_id:
    - light.powder_room_light
    trigger: state
    to: 'off'
    for:
      hours: 0
      minutes: 10
      seconds: 0
  conditions: []
  actions:
  - action: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.powder_room_fan
  mode: single
  initial_state: true
- id: '1739134591755'
  alias: Occupancy - Motion in Garage
  description: ''
  triggers:
  - type: motion
    device_id: f2b14e66dd6c2b0de54ce8265849dd90
    entity_id: 07a527c9cfc1b9741826933bd820a6b9
    domain: binary_sensor
    metadata:
      secondary: false
    trigger: device
  - trigger: state
    entity_id:
    - binary_sensor.rack_motion
    to: 'on'
  conditions:
  - condition: or
    conditions:
    - condition: state
      entity_id: sun.sun
      state: below_horizon
      for:
        hours: 0
        minutes: 30
        seconds: 0
    - condition: numeric_state
      entity_id: sensor.hue_outdoor_motion_sensor_1_illuminance
      attribute: light_level
      below: 10000
  actions:
  - action: light.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: light.garage_lights
  - condition: state
    entity_id: binary_sensor.hue_outdoor_motion_sensor_1_motion
    state: 'off'
    for:
      hours: 0
      minutes: 15
      seconds: 0
  - action: light.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: light.garage_lights
  mode: restart
- id: '1739655330002'
  alias: Sync Bathroom TubandShower
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - light.bathroom_shower
    - light.bathroom_tub
  conditions: []
  actions:
  - variables:
      lightAction: "{%- if trigger.to_state.state == 'on' -%}\n      light.turn_on\n{%-
        else -%}\n      light.turn_off\n{% endif %}\n"
  - entity_id:
    - light.bathroom_shower
    - light.bathroom_tub
    action: '{{ lightAction }}'
  mode: single
- id: '1739655519910'
  alias: Sync Bathroom Lights to off with Bathroom Sink
  description: ''
  triggers:
  - entity_id:
    - light.bathroom_sink
    trigger: state
    to: 'off'
    for:
      hours: 0
      minutes: 10
      seconds: 0
  conditions: []
  actions:
  - action: light.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: light.bathroom_lights
  mode: single
  initial_state: true
- id: '1740021343908'
  alias: Occupancy - Living Room Lights
  description: ''
  triggers:
  - entity_id: binary_sensor.living_room_sensor_motion
    from: 'off'
    to: 'on'
    trigger: state
  conditions:
  - condition: and
    conditions:
    - condition: or
      conditions:
      - condition: state
        entity_id: light.livingroom_lights
        state: 'off'
      - condition: state
        entity_id: light.foyer_lights
        state: 'off'
    - condition: or
      conditions:
      - condition: state
        entity_id: sun.sun
        state: below_horizon
      - condition: numeric_state
        entity_id: sensor.living_room_sensor_light_level
        attribute: light_level
        below: 8000
  actions:
  - target:
      entity_id:
      - light.livingroom_pots
      - light.foyer_front
      - light.loft_trees
    action: light.turn_on
    data: {}
  - wait_for_trigger:
      entity_id: binary_sensor.living_room_sensor_motion
      from: 'on'
      to: 'off'
      trigger: state
  - delay:
      hours: 0
      minutes: 10
      seconds: 0
      milliseconds: 0
  - target:
      entity_id:
      - light.livingroom_pots
      - light.foyer_front
      - light.loft_trees
    action: light.turn_off
    data: {}
  mode: restart
  max_exceeded: silent
- id: '1741648529877'
  alias: Occupancy - No Motion in Garage
  description: ''
  triggers:
  - type: no_motion
    device_id: f2b14e66dd6c2b0de54ce8265849dd90
    entity_id: 07a527c9cfc1b9741826933bd820a6b9
    domain: binary_sensor
    trigger: device
    for:
      hours: 0
      minutes: 15
      seconds: 0
  conditions: []
  actions:
  - action: light.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: light.garage_lights
  mode: single
- id: '1741834444675'
  alias: Occupancy TV room - lights on
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.tv_room_occupancy_occupancy
    trigger: state
    to: 'on'
  conditions:
  - condition: and
    conditions:
    - condition: not
      conditions:
      - condition: state
        entity_id: media_player.tv_roomtv
        state: 'on'
    - condition: numeric_state
      entity_id: sensor.tv_room_occupancy_illuminance
      below: 600
  actions:
  - action: scene.turn_on
    target:
      entity_id: scene.tv_room_dim
    data: {}
  mode: single
- id: '1742166855479'
  alias: Weather warning notification
  description: ''
  triggers:
  - trigger: numeric_state
    entity_id:
    - sensor.charlottetown_warnings
    - sensor.fredericton_warnings
    - sensor.saint_john_warnings
    - sensor.montreal_warnings
    above: 0
  conditions: []
  actions:
  - data:
      message: '{% if trigger.to_state.attributes.location == states(''sensor.closest_city'')
        %} :bangbang: NEARBY ALERT: {{ trigger.to_state.attributes.location }} ({{
        state_attr(''sensor.closest_city'', ''distance'') }} km away) {% else %} :warning:
        Weather Warning: {{ trigger.to_state.attributes.location }} {% endif %}

        {% if trigger.to_state.attributes.alert_1 is defined %} {{ trigger.to_state.attributes.alert_1
        }} ({{ trigger.to_state.attributes.alert_time_1 }}) {% endif %} {% if trigger.to_state.attributes.alert_2
        is defined %} {{ trigger.to_state.attributes.alert_2 }} ({{ trigger.to_state.attributes.alert_time_2
        }}) {% endif %} {% if trigger.to_state.attributes.alert_3 is defined %} {{
        trigger.to_state.attributes.alert_3 }} ({{ trigger.to_state.attributes.alert_time_3
        }}) {% endif %}'
      title: Weather
    action: notify.zulip
  mode: single
- id: '1748216683732'
  alias: Lost Swimmer iPhone Location Alert
  description: Sends notification when lost Swimmer iPhone reports location again
  triggers:
  - entity_id: device_tracker.swimmer_iphone
    from: not_home
    to: home
    trigger: state
  - entity_id: device_tracker.swimmer_iphone
    from: unavailable
    to:
    - home
    - not_home
    trigger: state
  - entity_id: device_tracker.swimmer_iphone
    attribute: latitude
    trigger: state
  conditions:
  - condition: template
    value_template: '{{ states(''device_tracker.swimmer_iphone'') != ''unavailable''
      }}'
  actions:
  - data:
      title: ⚠️ Lost Swimmer iPhone Detected!
      message: 'Your lost Swimmer iPhone has been detected at  {{ states.device_tracker.swimmer_iphone.attributes.friendly_name
        }} ({{ states.device_tracker.swimmer_iphone.state }}). Coordinates: {{ states.device_tracker.swimmer_iphone.attributes.latitude
        }}, {{ states.device_tracker.swimmer_iphone.attributes.longitude }}

        '
      data:
        url: https://www.google.com/maps/search/?api=1&query={{ states.device_tracker.swimmer_iphone.attributes.latitude
          }},{{ states.device_tracker.swimmer_iphone.attributes.longitude }}
        actions:
        - action: URI
          title: View on Map
          uri: https://www.google.com/maps/search/?api=1&query={{ states.device_tracker.swimmer_iphone.attributes.latitude
            }},{{ states.device_tracker.swimmer_iphone.attributes.longitude }}
    action: notify.mobile_app_iphone
  - data:
      title: ':warning: Lost Swimmer iPhone Detected!'
      message: 'Your lost Swimmer iPhone has been detected at location: {{ states.device_tracker.swimmer_iphone.attributes.latitude
        }}, {{ states.device_tracker.swimmer_iphone.attributes.longitude }} Google
        Maps: https://www.google.com/maps/search/?api=1&query={{ states.device_tracker.swimmer_iphone.attributes.latitude
        }},{{ states.device_tracker.swimmer_iphone.attributes.longitude }}

        '
    action: notify.zulip
  mode: single
- id: '1749436656275'
  alias: Occupancy - Lock Doors on exit
  description: ''
  triggers:
  - entity_id:
    - person.gail
    - person.gervais
    - person.jennifer
    - person.cameron
    from: home
    trigger: state
  conditions:
  - condition: template
    value_template: '{{ as_timestamp(now()) - as_timestamp(states.automation.lock_doors_on_exit.attributes.last_triggered)
      | int > 600 }}'
  actions:
  - action: lock.lock
    metadata: {}
    data: {}
    target:
      entity_id:
      - lock.front_door_lock_lock_mechanism
      - lock.garage_door_lock_lock_mechanism
  mode: single
  initial_state: true
- id: theme_selector_automation
  alias: Change Theme Based on Selector
  description: Automatically change the frontend theme when theme selector changes
  trigger:
  - platform: state
    entity_id: input_select.theme_selector
  action:
  - service: frontend.set_theme
    data:
      name: "{% if states('input_select.theme_selector') == 'default' %}\n  default\n{%
        else %}\n  {{ states('input_select.theme_selector') }}\n{% endif %}\n"
  mode: single
  initial_state: true
- id: volvo_doors_windows_open_after_parking
  alias: Volvo - Doors/Windows Not Closed After Parking
  triggers:
  - entity_id: binary_sensor.volvo_volvo_engine_status
    from: 'on'
    to: 'off'
    for: 00:15:00
    trigger: state
  conditions:
  - condition: or
    conditions:
    - condition: state
      entity_id: binary_sensor.volvo_volvo_door_front_left
      state: 'on'
    - condition: state
      entity_id: binary_sensor.volvo_volvo_door_front_right
      state: 'on'
    - condition: state
      entity_id: binary_sensor.volvo_volvo_door_rear_left
      state: 'on'
    - condition: state
      entity_id: binary_sensor.volvo_volvo_door_rear_right
      state: 'on'
    - condition: state
      entity_id: binary_sensor.volvo_volvo_tailgate
      state: 'on'
    - condition: state
      entity_id: binary_sensor.volvo_volvo_hood
      state: 'on'
    - condition: state
      entity_id: binary_sensor.volvo_volvo_window_front_left
      state: 'on'
    - condition: state
      entity_id: binary_sensor.volvo_volvo_window_front_right
      state: 'on'
    - condition: state
      entity_id: binary_sensor.volvo_volvo_window_rear_left
      state: 'on'
    - condition: state
      entity_id: binary_sensor.volvo_volvo_window_rear_right
      state: 'on'
    - condition: state
      entity_id: binary_sensor.volvo_volvo_sunroof
      state: 'on'
  actions:
  - data:
      message: "\U0001F697 Volvo not properly secured 15 minutes after parking! {%
        set issues = [] %} {% if is_state('binary_sensor.volvo_volvo_door_front_left',
        'on') %}{% set issues = issues + ['Front left door'] %}{% endif %} {% if is_state('binary_sensor.volvo_volvo_door_front_right',
        'on') %}{% set issues = issues + ['Front right door'] %}{% endif %} {% if
        is_state('binary_sensor.volvo_volvo_door_rear_left', 'on') %}{% set issues
        = issues + ['Rear left door'] %}{% endif %} {% if is_state('binary_sensor.volvo_volvo_door_rear_right',
        'on') %}{% set issues = issues + ['Rear right door'] %}{% endif %} {% if is_state('binary_sensor.volvo_volvo_tailgate',
        'on') %}{% set issues = issues + ['Tailgate'] %}{% endif %} {% if is_state('binary_sensor.volvo_volvo_hood',
        'on') %}{% set issues = issues + ['Hood'] %}{% endif %} {% if is_state('binary_sensor.volvo_volvo_window_front_left',
        'on') %}{% set issues = issues + ['Front left window'] %}{% endif %} {% if
        is_state('binary_sensor.volvo_volvo_window_front_right', 'on') %}{% set issues
        = issues + ['Front right window'] %}{% endif %} {% if is_state('binary_sensor.volvo_volvo_window_rear_left',
        'on') %}{% set issues = issues + ['Rear left window'] %}{% endif %} {% if
        is_state('binary_sensor.volvo_volvo_window_rear_right', 'on') %}{% set issues
        = issues + ['Rear right window'] %}{% endif %} {% if is_state('binary_sensor.volvo_volvo_sunroof',
        'on') %}{% set issues = issues + ['Sunroof'] %}{% endif %} Open: {{ issues
        | join(', ') }}\n"
      title: Volvo
    action: notify.zulip
  mode: single
- id: volvo_service_warnings
  alias: Volvo - Service Warnings
  triggers:
  - entity_id:
    - binary_sensor.volvo_volvo_service_warning
    - binary_sensor.volvo_volvo_brake_fluid_level_warning
    - binary_sensor.volvo_volvo_coolant_level_warning
    - binary_sensor.volvo_volvo_oil_level_warning
    - binary_sensor.volvo_volvo_washer_fluid_level_warning
    to: 'on'
    trigger: state
  actions:
  - data:
      message: "\U0001F527 Volvo Service Alert: {{ trigger.to_state.attributes.friendly_name
        }} needs attention! {% if trigger.entity_id == 'binary_sensor.volvo_volvo_service_warning'
        %} Regular service is due. {% elif trigger.entity_id == 'binary_sensor.volvo_volvo_brake_fluid_level_warning'
        %} ⚠️ SAFETY CRITICAL: Brake fluid level is low! {% elif trigger.entity_id
        == 'binary_sensor.volvo_volvo_coolant_level_warning' %} Coolant level is low
        - engine may overheat. {% elif trigger.entity_id == 'binary_sensor.volvo_volvo_oil_level_warning'
        %} Oil level is low - check and top up immediately. {% elif trigger.entity_id
        == 'binary_sensor.volvo_volvo_washer_fluid_level_warning' %} Washer fluid
        is low - refill when convenient. {% endif %}\n"
      title: Volvo
    action: notify.zulip
  mode: single
- id: volvo_tire_pressure_warning
  alias: Volvo - Tire Pressure Warning
  triggers:
  - entity_id:
    - binary_sensor.volvo_volvo_tyre_front_left
    - binary_sensor.volvo_volvo_tyre_front_right
    - binary_sensor.volvo_volvo_tyre_rear_left
    - binary_sensor.volvo_volvo_tyre_rear_right
    to: 'on'
    trigger: state
  actions:
  - data:
      message: '⚠️ Volvo tire pressure warning: {{ trigger.to_state.attributes.friendly_name
        }} needs attention. Check tire pressure soon for safety and fuel efficiency.
        Current fuel: {{ states(''sensor.volvo_volvo_fuel_amount'') }}L

        '
      title: Volvo
    action: notify.zulip
  mode: single
