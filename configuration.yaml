# vim: set expandtab tabstop=2 shiftwidth=2 softtabstop=2:

homeassistant:
  # Name of the location where Home Assistant is running
  name: Home
  # Location required to calculate the time the sun rises and sets
  latitude: !secret home_latitude
  longitude: !secret home_longitude
  # Impacts weather/sunrise data (altitude above sea level in meters)
  elevation: 7
  # metric for Metric, imperial for Imperial
  unit_system: metric
  # Pick yours from here: http://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  time_zone: America/Halifax
  customize: !include customize.yaml

default_config:

# Weather integrations configured via UI (Met.no)

# {{{ Alexa

alexa:
  smart_home:
    endpoint: https://api.amazonalexa.com/v3/events
    client_id: !secret alexa_client_id
    client_secret: !secret alexa_client_secret
    filter:
      include_domains:
        - climate
        - light
        - lock
        - scene
      include_entities:
        - media_player.basement_tv
        - media_player.bedroomtv
        - media_player.tv_roomtv
        - switch.switch1

# }}}
# {{{ frontend

# Enables the frontend
frontend:
  themes: !include_dir_merge_named themes/

# Lovelace UI configuration removed - will be configured via UI

http:
  use_x_forwarded_for: true
  trusted_proxies:
    - 192.168.10.80

# }}}
# {{{ Homekit

homekit:
  filter:
    include_domains:
      - climate
      - fan
      - light
      - lock
      - scene
    include_entities:
      - media_player.bedroomtv
      - media_player.tv_roomtv
    include_entity_globs:
      - binary_sensor.*_occupancy
      - sensor.*_humidity
      - sensor.*_temperature
    exclude_entity_globs:
      - camera.*_sd_*
      - sensor.fredericton_*
    exclude_entities:
      - camera.doorbell_high
      - sensor.garage_temperature

# }}}
## {{{ Rest Commands

rest_command:
  sabnzb_api:
    url: !secret sabnzbd_rest_url

# }}}
# {{{ wakeword

      #wake_word:
      #  - platform: openwakeword
      #    model: hey_jarvis
      #    # Optional - available models: alexa, hey jarvis, hey mycroft, ok google

# }}}
#  {{{ InfluxDB

influxdb:
  api_version: 2
  host: blackbird.dem
  port: 8086
  ssl: false
  verify_ssl: false
  token: !secret influxdb_token
  organization: 6338b4c35d8af0a9
  bucket: homeassistant
  tags:
    source: ha
  tags_attributes:
    - friendly_name
  max_retries: 3
  default_measurement: units
  include:
    domains:
      - binary_sensor
      - sensor
  exclude:
    entities:
      - sensor.displays
      - sensor.frontmost_app
      - sensor.python_package_index_pypi
      - sensor.last_update_trigger
      - sensor.season
    entity_globs:
      - binary_sensor.*_detections_motion
      - binary_sensor.*_detections_motion
      - binary_sensor.*_hdr_mode
      - binary_sensor.*_is_dark
      - binary_sensor.*_motion
      - binary_sensor.*_overlay_show_bitrate
      - binary_sensor.*_overlay_show_date
      - binary_sensor.*_overlay_show_logo
      - binary_sensor.*_overlay_show_name
      - binary_sensor.*_status_light_on
      - sensor.*_infrared_mode
      - sensor.*_recording_mode
      - sensor.*_energy_factor
      - sensor.*_energy_totalstarttime
      - sensor.*_last_restart_time
      - sensor.*_mqtt_connect_count
      - sensor.*_restart_reason
      - sensor.*_ssid
      - sensor.*_wifi_connect_count
      - sensor.*_steps
      - sensor.*_last_restart_time_2
      - sensor.*_mqtt_connect_count_2
      - sensor.*_restart_reason_2
      - sensor.*_ssid_2
      - sensor.*_wifi_connect_count_2
      - sensor.active_*
      - sensor.primary_display_*
      - sensor.sun_*

# }}}
# {{{ Lights

light:
  # Make Switches act like lights
  - platform: switch
    name: Bathroom Shower
    entity_id: switch.bathroom_shower

  - platform: switch
    name: Bathroom Tub
    entity_id: switch.bathroom_tub

      #  - platform: switch
      #    name: Basement Shower
      #    entity_id: switch.basement_shower

  - platform: switch
    name: Basement Stairs
    entity_id: switch.basement_stairs

  - platform: switch
    name: Dining Room Lamp0
    entity_id: switch.switch10

  - platform: switch
    name: Dining Room Lamp1
    entity_id: switch.switch11

  - platform: switch
    name: Garage Lights
    entity_id: switch.garage_lights

  - platform: switch
    name: Hallway Lamp
    entity_id: switch.switch8

  - platform: switch
    name: Kitchen Counter
    entity_id: switch.kitchen_counter

  - platform: switch
    name: Kitchen Sink
    entity_id: switch.kitchen_sink

  - platform: switch
    name: Livingroom Lamp
    entity_id: switch.switch6

  - platform: switch
    name: Loft Tree0
    entity_id: switch.switch2

  - platform: switch
    name: Loft Tree1
    entity_id: switch.switch3

  - platform: switch
    name: Office Desk Lamp
    entity_id: switch.switch7

  - platform: switch
    name: Outdoor Driveway
    entity_id: switch.outdoor_driveway

  - platform: switch
    name: Saltlick
    entity_id: switch.switch5

  - platform: group
    name: Basement Lights
    unique_id: basement_lights_group
    entities:
      - light.basement_stairs
      - light.basement_bathroom
      - light.basement_shower
      - light.basement_storage
      - light.office_lights
      - light.tv_room_lights

  - platform: group
    name: Bathroom Lights
    unique_id: bathroom_lights_group
    entities:
      - light.bathroom_shower
      - light.bathroom_sink
      - light.bathroom_tub

  - platform: group
    name: Bedroom Ceiling
    unique_id: bedroom_ceiling_group
    entities:
      - light.bedroom0
      - light.bedroom7

  - platform: group
    name: Bedroom Lamps
    unique_id: bedroom_lamps_group
    entities:
      - light.bedroom2
      - light.bedroom3

  - platform: group
    name: Bedroom Lights
    unique_id: bedroom_room_lamps_group
    entities:
      - light.bedroom_ceiling
      - light.bedroom_lamps

  - platform: group
    name: Dining Room Lamps
    unique_id: dining_room_lamps_group
    entities:
      - light.dining_room_lamp0
      - light.dining_room_lamp1

  - platform: group
    name: Dining Room Lights
    unique_id: dining_room_lights_group
    entities:
      - light.dining_room_lamps
      - light.dining_room_table

  - platform: group
    name: Dressing Room Lights
    unique_id: dressing_room_lights_group
    entities:
      - light.bedroom5
      - light.bedroom6

  - platform: group
    name: Entryway Lights
    unique_id: entryway_lights_group
    entities:
      - light.entryway0
      - light.entryway1
      - light.entryway2

  - platform: group
    name: Foyer Front
    unique_id: foyer_front_group
    entities:
      - light.foyer0
      - light.foyer1

  - platform: group
    name: Foyer Back
    unique_id: foyer_back_group
    entities:
      - light.foyer2
      - light.foyer3

  - platform: group
    name: Foyer Lights
    unique_id: foyer_lights_group
    entities:
      - light.foyer0
      - light.foyer1
      - light.foyer2
      - light.foyer3

  - platform: group
    name: Gail Office Lights
    unique_id: gail_office_lights_group
    entities:
      - light.gail_office_lamp
      - light.gail_office_main

  - platform: group
    name: Hallway Lights
    unique_id: hallway_lights_group
    entities:
      - light.basement_stairs
      - light.upstairs_hallway
      - light.entryway_lights
      - light.foyer_lights
      - light.hallway_lamp
      - light.upstairs_hallway
      - light.main_floor_stairs

  - platform: group
    name: Kitchen Lights
    unique_id: kichen_lights_group
    entities:
      - light.kitchen_counter
      - light.kitchen_island
      - light.kitchen_pots
      - light.kitchen_sink

  - platform: group
    name: Laundry Room Lights
    unique_id: living_room_lights_group
    entities:
      - light.laundry0
      - light.laundry1

  - platform: group
    name: Livingroom Lights
    unique_id: livingroom_lights_group
    entities:
      - light.livingroom_lamp
      - light.livingroom_main
      - light.livingroom_pots
      - light.saltlick

  - platform: group
    name: Loft Trees
    unique_id: loft_trees_group
    entities:
      - light.loft_tree0
      - light.loft_tree1

  - platform: group
    name: Main Floor Lights
    unique_id: main_floor_lights_group
    entities:
      - light.dining_room_lights
      - light.entryway_lights
      - light.foyer_lights
      - light.garage_lights
      - light.kitchen_lights
      - light.livingroom_lights
      - light.loft_trees
      - light.powder_room_light

  - platform: group
    name: Office Lights
    unique_id: office_lights_group
    entities:
      - light.office_desk_lamp
      - light.office_ceiling_light
      - light.office_floor_lamp
      - light.office_desk_lights

  - platform: group
    name: Back Door Lights
    unique_id: back_door_lights_group
    entities:
      - light.back_door0
      - light.back_door1

  - platform: group
    name: Outdoor Lights
    unique_id: outdoor_lights_group
    entities:
      - light.outdoor_back_door
      - light.outdoor_driveway
      - light.outdoor_pots

  - platform: group
    name: Second Floor Lights
    unique_id: second_floor_lights_group
    entities:
      - light.bathroom_lights
      - light.bedroom_lights
      - light.dressing_room_lights
      - light.gail_office_lights
      - light.hallway_lamp
      - light.laundry_room_lights

  - platform: group
    name: TV Room Lamps
    unique_id: tv_rooms_lamps_group
    entities:
      - light.lamp1
      - light.lamp2
      - light.bedroom4

  - platform: group
    name: TV Room Lights
    unique_id: tv_room_lights_group
    entities:
      - light.tv_room_lamps
      - light.tv_room_pots

#  }}}
# {{{ Media Players

media_player:

# }}}
# {{{ Misc

# Enable frontend configuration
config:

# Set logging level
logger:
  default: error
  logs:
    homeassistant.components.camera: fatal
    homeassistant.components.media_player.roku: fatal
    homeassistant.components.http.ban: warning
    homeassistant.components.wemo: fatal

# Enables support for tracking state changes over time.
history:

# Setup recorder and logbook
recorder:
  db_url: !secret db_url
logbook:
  exclude:
    domains:
      - device_tracker
      - sun

# Track the sun
sun:

ffmpeg:
  ffmpeg_bin: /usr/bin/ffmpeg

# Enable Mobile App component
mobile_app:

system_health:

# }}}
# {{{ mqtt

timer:
  zigbee_permit_join:
    name: Time remaining
    duration: 120

# Input select for Zigbee2mqtt debug level
input_select:
  zigbee2mqtt_log_level:
    name: Zigbee2mqtt Log Level
    options:
      - debug
      - info
      - warn
      - error
    initial: info
    icon: mdi:format-list-bulleted

  theme_selector:
    name: Theme Selector
    options:
      - default
      - Purple Haze
      - Dark Theme1
      - Forest
      - Midnight Blue
      - Warm Sunset
    initial: default
    icon: mdi:palette

# Input text to input Zigbee2mqtt friendly_name for scripts
input_text:
  zigbee2mqtt_old_name:
    name: Zigbee2mqtt Old Name
  zigbee2mqtt_new_name:
    name: Zigbee2mqtt New Name
  zigbee2mqtt_remove:
    name: Zigbee2mqtt Remove

# }}}
# {{{ Notify

notify:
  - name: zulip
    platform: rest
    resource: !secret zulip_notify_resource
    method: POST_JSON
    title_param_name: topic

# }}}
# {{{ Persons

person:
  - name: Gail
    id: gail1968
    user_id: 09f60884ba844227a9b3c2d54fb341e2
    device_trackers:
      - device_tracker.gail_iphone
  - name: Cameron
    id: cam1995
    device_trackers:
      - device_tracker.cameron_s_s23
  - name: Grant
    id: grant1994
    device_trackers:
      - device_tracker.grantphone
  - name: Jennifer
    id: jen2000
    user_id: 10f174a6c6db401babe419a388e8eaa8
    device_trackers:
      - device_tracker.jennifer
# }}}
# {{{ Sensors

sensor:
  - platform: template
    sensors:
      total_active_clients:
        friendly_name: "Total Active Clients"
        unit_of_measurement: "clients"
        value_template: >
          {{ (states('sensor.spitfire') | int(0)) + (states('sensor.arrow_active_clients') | int(0)) }}

      indoor_temperature_average:
        friendly_name: "Indoor Temperature Average"
        unit_of_measurement: "°C"
        value_template: >
          {% set sensors = [
            states('sensor.bedroom_sensor_temperature'),
            states('sensor.dining_room_sensor_temperature'),
            states('sensor.kitchen_sensor_temperature'),
            states('sensor.living_room_sensor_temperature'),
            states('sensor.gail_office_sensor_temperature'),
            states('sensor.temperature_humidity_sensor_dca4_temperature')
          ] | select('is_number') | map('float') | list %}
          {{ (sensors | sum / sensors | length) | round(1) if sensors else 'unknown' }}

      indoor_humidity_average:
        friendly_name: "Indoor Humidity Average"
        unit_of_measurement: "%"
        value_template: >
          {% set sensors = [
            states('sensor.bedroom_sensor_humidity'),
            states('sensor.dining_room_sensor_humidity'),
            states('sensor.gail_office_sensor_humidity'),
            states('sensor.temperature_humidity_sensor_dca4_humidity')
          ] | select('is_number') | map('float') | list %}
          {{ (sensors | sum / sensors | length) | round(0) if sensors else 'unknown' }}

  - platform: template
    sensors:
      closest_city:
        unique_id: closest_city_sensor
        friendly_name: "Closest City"
        value_template: >-
          {% set user_latitude = state_attr('person.gervais', 'latitude') | float %}
          {% set user_longitude = state_attr('person.gervais', 'longitude') | float %}

          {% set cities = {
            'Charlottetown': {'lat': 46.2382, 'lon': -63.1311},
            'Fredericton': {'lat': 45.9636, 'lon': -66.6431},
            'Saint John': {'lat': 45.2733, 'lon': -66.0633},
            'Montreal': {'lat': 45.5017, 'lon': -73.5673},
            'Halifax': {'lat': 44.6488, 'lon': -63.5752},
            'Toronto': {'lat': 43.6532, 'lon': -79.3832},
            'Calgary': {'lat': 51.0447, 'lon': -114.0719},
            'Atlanta': {'lat': 33.7490, 'lon': -84.3880},
            'Las Vegas': {'lat': 36.1699, 'lon': -115.1398}
          } %}

          {% set closest_city = namespace(name='', distance=999999) %}
          {% for city_name, city_data in cities.items() %}
            {% set distance = distance(user_latitude, user_longitude, city_data.lat, city_data.lon) %}
            {% if distance < closest_city.distance %}
              {% set closest_city.name = city_name %}
              {% set closest_city.distance = distance %}
            {% endif %}
          {% endfor %}

          {{ closest_city.name }}
        attribute_templates:
          distance: >-
            {% set user_latitude = state_attr('person.gervais', 'latitude') | float %}
            {% set user_longitude = state_attr('person.gervais', 'longitude') | float %}

            {% set cities = {
              'Charlottetown': {'lat': 46.2382, 'lon': -63.1311},
              'Fredericton': {'lat': 45.9636, 'lon': -66.6431},
              'Saint John': {'lat': 45.2733, 'lon': -66.0633},
              'Montreal': {'lat': 45.5017, 'lon': -73.5673},
              'Halifax': {'lat': 44.6488, 'lon': -63.5752},
              'Toronto': {'lat': 43.6532, 'lon': -79.3832},
              'Calgary': {'lat': 51.0447, 'lon': -114.0719},
              'Atlanta': {'lat': 33.7490, 'lon': -84.3880},
              'Las Vegas': {'lat': 36.1699, 'lon': -115.1398}
            } %}

            {% set closest_city = namespace(name='', distance=999999) %}
            {% for city_name, city_data in cities.items() %}
              {% set distance = distance(user_latitude, user_longitude, city_data.lat, city_data.lon) %}
              {% if distance < closest_city.distance %}
                {% set closest_city.name = city_name %}
                {% set closest_city.distance = distance %}
              {% endif %}
            {% endfor %}

            {{ closest_city.distance | round(1) }}
          latitude: >-
            {% set cities = {
              'Charlottetown': {'lat': 46.2382, 'lon': -63.1311},
              'Fredericton': {'lat': 45.9636, 'lon': -66.6431},
              'Saint John': {'lat': 45.2733, 'lon': -66.0633},
              'Montreal': {'lat': 45.5017, 'lon': -73.5673},
              'Halifax': {'lat': 44.6488, 'lon': -63.5752},
              'Toronto': {'lat': 43.6532, 'lon': -79.3832},
              'Calgary': {'lat': 51.0447, 'lon': -114.0719},
              'Atlanta': {'lat': 33.7490, 'lon': -84.3880},
              'Las Vegas': {'lat': 36.1699, 'lon': -115.1398}
            } %}

            {{ cities[states('sensor.closest_city')]['lat'] }}
          longitude: >-
            {% set cities = {
              'Charlottetown': {'lat': 46.2382, 'lon': -63.1311},
              'Fredericton': {'lat': 45.9636, 'lon': -66.6431},
              'Saint John': {'lat': 45.2733, 'lon': -66.0633},
              'Montreal': {'lat': 45.5017, 'lon': -73.5673},
              'Halifax': {'lat': 44.6488, 'lon': -63.5752},
              'Toronto': {'lat': 43.6532, 'lon': -79.3832},
              'Calgary': {'lat': 51.0447, 'lon': -114.0719},
              'Atlanta': {'lat': 33.7490, 'lon': -84.3880},
              'Las Vegas': {'lat': 36.1699, 'lon': -115.1398}
            } %}

            {{ cities[states('sensor.closest_city')]['lon'] }}
          condition_entity: >-
            {% set entities = {
              'Charlottetown': 'sensor.charlottetown_current_condition',
              'Fredericton': 'sensor.fredericton_condition',
              'Saint John': 'sensor.saint_john_current_condition',
              'Montreal': 'sensor.montreal_current_condition',
              'Atlanta': 'sensor.atlanta_current_condition',
              'Las Vegas': 'sensor.las_vegas_current_condition'
            } %}

            {{ entities[states('sensor.closest_city')] }}
          temperature_entity: >-
            {% set entities = {
              'Charlottetown': 'sensor.charlottetown_temperature',
              'Fredericton': 'sensor.fredericton_temperature',
              'Saint John': 'sensor.saint_john_temperature',
              'Montreal': 'sensor.montreal_temperature',
              'Atlanta': 'sensor.atlanta_temperature',
              'Las Vegas': 'sensor.las_vegas_temperature'
            } %}

            {{ entities[states('sensor.closest_city')] }}
          humidex_entity: >-
            {% set entities = {
              'Charlottetown': 'sensor.charlottetown_humidex',
              'Fredericton': 'sensor.fredericton_humidex',
              'Saint John': 'sensor.saint_john_humidex',
              'Montreal': 'sensor.montreal_humidex'
            } %}

            {{ entities[states('sensor.closest_city')] }}
          uv_index_entity: >-
            {% set entities = {
              'Charlottetown': 'sensor.charlottetown_uv_index',
              'Fredericton': 'sensor.fredericton_uv_index',
              'Saint John': 'sensor.saint_john_uv_index',
              'Montreal': 'sensor.montreal_uv_index'
            } %}

            {{ entities[states('sensor.closest_city')] }}
          wind_chill_entity: >-
            {% set entities = {
              'Charlottetown': 'sensor.charlottetown_wind_chill',
              'Fredericton': 'sensor.fredericton_wind_chill',
              'Saint John': 'sensor.saint_john_wind_chill',
              'Montreal': 'sensor.montreal_wind_chill'
            } %}

            {{ entities[states('sensor.closest_city')] }}
          warnings_entity: >-
            {% set entities = {
              'Charlottetown': 'sensor.charlottetown_warnings',
              'Fredericton': 'sensor.fredericton_warnings',
              'Saint John': 'sensor.saint_john_warnings',
              'Montreal': 'sensor.montreal_warnings'
            } %}

            {{ entities[states('sensor.closest_city')] }}

      distance_apart:
        friendly_name: 'GandG Apart'
        value_template: >-
          {% if distance(states.device_tracker.iphone, states.device_tracker.gail_iphone) | int == 0 %}
            0
          {% elif distance(states.device_tracker.iphone, states.device_tracker.gail_iphone) | round(2) < 0.09 %}
            0
          {% else %}
            {{ distance(states.device_tracker.iphone, states.device_tracker.gail_iphone) | round(2) }}
          {% endif %}
        unit_of_measurement: 'km'

      delicious_docked:
        unique_id: delicious_docked_sensor
        friendly_name: 'Delicious Docked'
        value_template: >-
          {% if states('switch.delicious_paused') == 'on' -%}
            Paused
          {% else %}
            {% if states('binary_sensor.delicious_docked') == 'off' -%}
              {% if states('fan.delicious') == 'on' -%}
                Vacuuming
              {% else -%}
                Returning to Dock
              {% endif %}
            {% else -%}
              docked
            {% endif %}
          {% endif %}

  - platform: template
    sensors:
      dining_mysa_temperature:
        friendly_name: "Dining Mysa Temperature"
        unit_of_measurement: "°C"
        device_class: temperature
        value_template: "{{ state_attr('climate.mysa_112908_thermostat', 'current_temperature') }}"

      bedroom_mysa_temperature:
        friendly_name: "Bedroom Mysa Temperature"
        unit_of_measurement: "°C"
        device_class: temperature
        value_template: "{{ state_attr('climate.mysa_2fa20c_thermostat', 'current_temperature') }}"

      dining_mysa_humidity:
        friendly_name: "Dining Mysa Humidity"
        unit_of_measurement: "%"
        device_class: humidity
        value_template: "{{ state_attr('climate.mysa_112908_thermostat', 'current_humidity') }}"

      bedroom_mysa_humidity:
        friendly_name: "Bedroom Mysa Humidity"
        unit_of_measurement: "%"
        device_class: humidity
        value_template: "{{ state_attr('climate.mysa_2fa20c_thermostat', 'current_humidity') }}"

      # Atlanta weather sensors from Met.no
      atlanta_current_condition:
        friendly_name: "Atlanta Current Condition"
        value_template: "{{ states('weather.forecast_atlanta') }}"

      atlanta_temperature:
        friendly_name: "Atlanta Temperature"
        unit_of_measurement: "°C"
        device_class: temperature
        value_template: "{{ state_attr('weather.forecast_atlanta', 'temperature') }}"

      atlanta_high_temperature:
        friendly_name: "Atlanta High Temperature"
        unit_of_measurement: "°C"
        device_class: temperature
        value_template: "{{ state_attr('weather.forecast_atlanta', 'forecast')[0].temperature if state_attr('weather.forecast_atlanta', 'forecast') else none }}"

      atlanta_low_temperature:
        friendly_name: "Atlanta Low Temperature"
        unit_of_measurement: "°C"
        device_class: temperature
        value_template: "{{ state_attr('weather.forecast_atlanta', 'forecast')[0].templow if state_attr('weather.forecast_atlanta', 'forecast') else none }}"

      atlanta_summary:
        friendly_name: "Atlanta Summary"
        value_template: "{{ state_attr('weather.forecast_atlanta', 'forecast')[0].detailed_description if state_attr('weather.forecast_atlanta', 'forecast') else 'No forecast available' }}"

      # Las Vegas weather sensors from Met.no
      las_vegas_current_condition:
        friendly_name: "Las Vegas Current Condition"
        value_template: "{{ states('weather.forecast_las_vegas') }}"

      las_vegas_temperature:
        friendly_name: "Las Vegas Temperature"
        unit_of_measurement: "°C"
        device_class: temperature
        value_template: "{{ state_attr('weather.forecast_las_vegas', 'temperature') }}"

      las_vegas_high_temperature:
        friendly_name: "Las Vegas High Temperature"
        unit_of_measurement: "°C"
        device_class: temperature
        value_template: "{{ state_attr('weather.forecast_las_vegas', 'forecast')[0].temperature if state_attr('weather.forecast_las_vegas', 'forecast') else none }}"

      las_vegas_low_temperature:
        friendly_name: "Las Vegas Low Temperature"
        unit_of_measurement: "°C"
        device_class: temperature
        value_template: "{{ state_attr('weather.forecast_las_vegas', 'forecast')[0].templow if state_attr('weather.forecast_las_vegas', 'forecast') else none }}"

      las_vegas_summary:
        friendly_name: "Las Vegas Summary"
        value_template: "{{ state_attr('weather.forecast_las_vegas', 'forecast')[0].detailed_description if state_attr('weather.forecast_las_vegas', 'forecast') else 'No forecast available' }}"

# }}}
# {{{ Switches

# Wemo switches are not always being discovered automatically.
wemo:
  discovery: false
  static:
    - 192.168.20.80
    - 192.168.20.82
    - 192.168.20.83

# }}}
# {{{ Text-to-speech
#tts:
#  - platform: google_translate
#    service_name: google_say
#
#  - platform: voicerss
#    api_key: !secret voicerss_api_key

# }}}

group: !include groups.yaml
scene: !include scenes.yaml
automation: !include automations.yaml
script: !include scripts.yaml
